# Production Docker Compose configuration for MEISTROVERSE
# Use this for production deployments with optimized settings

version: '3.8'

services:
  # MEISTROVERSE Application - Production Configuration
  meistroverse:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: meistroverse:latest
    container_name: meistroverse-app-prod
    restart: always
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+pymysql://meistroverse:${MYSQL_PASSWORD}@mysql:3306/meistroverse
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - LOG_LEVEL=INFO
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - PRINTIFY_API_KEY=${PRINTIFY_API_KEY:-}
      - PRINTIFY_SHOP_ID=${PRINTIFY_SHOP_ID:-}
    volumes:
      - meistroverse_data:/app/data
      - meistroverse_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meistroverse-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command: gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 --max-requests 1000 --timeout 60

  # MySQL Database - Production Configuration
  mysql:
    image: mysql:8.0
    container_name: meistroverse-mysql-prod
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=meistroverse
      - MYSQL_USER=meistroverse
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/production.cnf:/etc/mysql/conf.d/production.cnf:ro
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - meistroverse-network
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=1G
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: meistroverse-redis-prod
    restart: always
    volumes:
      - redis_data:/data
      - ./docker/redis/production.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - meistroverse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Celery Worker - Production Configuration
  celery-worker:
    image: meistroverse:latest
    container_name: meistroverse-celery-worker-prod
    restart: always
    command: celery -A meistroverse.celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000
    environment:
      - DATABASE_URL=mysql+pymysql://meistroverse:${MYSQL_PASSWORD}@mysql:3306/meistroverse
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - meistroverse_data:/app/data
      - meistroverse_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meistroverse-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Celery Beat - Production Configuration
  celery-beat:
    image: meistroverse:latest
    container_name: meistroverse-celery-beat-prod
    restart: always
    command: celery -A meistroverse.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=mysql+pymysql://meistroverse:${MYSQL_PASSWORD}@mysql:3306/meistroverse
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - meistroverse_data:/app/data
      - meistroverse_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meistroverse-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Nginx - Production Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: meistroverse-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - meistroverse
    networks:
      - meistroverse-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus - Production Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: meistroverse-prometheus-prod
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - meistroverse-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana - Production Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: meistroverse-grafana-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - meistroverse-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Log aggregation with Fluentd (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: meistroverse-fluentd-prod
    restart: unless-stopped
    volumes:
      - ./docker/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - meistroverse_logs:/app/logs:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - meistroverse-network
    profiles:
      - logging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/meistroverse/mysql
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/meistroverse/redis
  meistroverse_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/meistroverse/data
  meistroverse_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/meistroverse
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/nginx
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/meistroverse/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/meistroverse/grafana

networks:
  meistroverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: meistroverse0