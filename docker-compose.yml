
services:
  # MEISTROVERSE Application
  meistroverse:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: meistroverse-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+pymysql://meistroverse:${MYSQL_PASSWORD:-meistroverse123}@mysql:3306/meistroverse
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY:-your_secret_key_change_this_in_production}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - PRINTIFY_API_KEY=${PRINTIFY_API_KEY:-}
      - PRINTIFY_SHOP_ID=${PRINTIFY_SHOP_ID:-}
    volumes:
      - meistroverse_data:/app/data
      - meistroverse_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meistroverse-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.meistroverse.rule=Host(`localhost`)"
      - "traefik.http.services.meistroverse.loadbalancer.server.port=8000"

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: meistroverse-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-rootpassword123}
      - MYSQL_DATABASE=meistroverse
      - MYSQL_USER=meistroverse
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-meistroverse123}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-rootpassword123}"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s
    networks:
      - meistroverse-network

  # Redis for task queuing and caching
  redis:
    image: redis:7-alpine
    container_name: meistroverse-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 10s
    networks:
      - meistroverse-network

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: meistroverse-celery-worker
    restart: unless-stopped
    command: celery -A meistroverse.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=mysql+pymysql://meistroverse:${MYSQL_PASSWORD:-meistroverse123}@mysql:3306/meistroverse
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY:-your_secret_key_change_this_in_production}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - meistroverse_data:/app/data
      - meistroverse_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meistroverse-network

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: meistroverse-celery-beat
    restart: unless-stopped
    command: celery -A meistroverse.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=mysql+pymysql://meistroverse:${MYSQL_PASSWORD:-meistroverse123}@mysql:3306/meistroverse
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY:-your_secret_key_change_this_in_production}
    volumes:
      - meistroverse_data:/app/data
      - meistroverse_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - meistroverse-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: meistroverse-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - meistroverse
    networks:
      - meistroverse-network
    profiles:
      - nginx

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: meistroverse-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - meistroverse-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: meistroverse-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - meistroverse-network
    profiles:
      - monitoring

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  meistroverse_data:
    driver: local
  meistroverse_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  meistroverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16